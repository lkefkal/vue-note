var c=Object.defineProperty;var n=(o,e,t)=>e in o?c(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var i=(o,e,t)=>(n(o,typeof e!="symbol"?e+"":e,t),t);import{C as d,P as y}from"./CleanCode-931345d6.js";import{O as C,V as f}from"./index-cd3cb997.js";var u=Object.defineProperty,g=Object.getOwnPropertyDescriptor,h=(o,e,t,l)=>{for(var r=l>1?void 0:l?g(e,t):e,a=o.length-1,s;a>=0;a--)(s=o[a])&&(r=(l?s(e,t,r):s(r))||r);return l&&r&&u(e,t,r),r};let p=class extends f{constructor(){super(...arguments);i(this,"code");i(this,"title");i(this,"toc");i(this,"isCopyed",!1);i(this,"inDisplay")}async copyToClipboard(e){try{await navigator.clipboard.writeText(e),console.log("Text copied to clipboard")}catch(t){console.error("Error in copying text: ",t)}}clickCopy(){this.copyToClipboard(this.cleanCode),this.isCopyed=!0,setTimeout(()=>{this.isCopyed=!1},1e3)}get cleanCode(){return new d(this.code).cleanCode}mounted(){y.highlightAll()}};p=h([C({props:{code:{type:String,require:!0},title:{type:String,default:"template"},toc:{type:String,default:"language-html"},inDisplay:{type:Boolean,default:!1}}})],p);export{p as P};
